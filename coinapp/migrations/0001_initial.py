# Generated by Django 5.1.1 on 2025-10-16 01:31

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Exchange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=5, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('address', models.CharField(max_length=255)),
                ('country_city', models.CharField(max_length=6)),
                ('postal_code', models.CharField(blank=True, max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='GeneralSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=50)),
                ('value', models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(max_length=50)),
                ('government_id', models.CharField(blank=True, max_length=50)),
                ('date_of_birth', models.DateField(help_text='Date of Birth in yyyy-mm-dd format.')),
                ('balance', models.IntegerField(default=0)),
                ('image', models.ImageField(upload_to='users/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('exchange', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='coinapp.exchange')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Listing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('Accommodation_Space', 'Accommodation and Space'), ('Advice_Tuition', 'Advice and Tuition'), ('Animals_Pets', 'Animals and Pets'), ('Appliances_Furniture', 'Appliances and Furniture'), ('Artisans_Specialists', 'Artisans and Specialists'), ('Arts_Crafts', 'Arts and Crafts'), ('Body_Mind', 'Body and Mind'), ('Books_Publications', 'Books and Publications'), ('BusinessServices', 'BusinessServices'), ('Care_Assistance', 'Care and Assistance'), ('CESServices', 'CESServices'), ('Clothing_Apparel', 'Clothing and Apparel'), ('Community', 'Community'), ('Companionship', 'Companionship'), ('Computer_IT', 'Computer and IT'), ('Electronics', 'Electronics'), ('Entertainment_Recreation', 'Entertainment and Recreation'), ('Food_Drink', 'Food and Drink'), ('Gardening_Agriculture', 'Gardening and Agriculture'), ('Goods', 'Goods'), ('Hiring_Borrowing', 'Hiring and Borrowing'), ('HomeServices', 'HomeServices'), ('Labour_Assistance', 'Labour and Assistance'), ('Media_Advertising', 'Media and Advertising'), ('Miscellaneous', 'Miscellaneous'), ('MotorVehicle', 'Motor Vehicle'), ('OfficeEquipment', 'Office Equipment'), ('PersonalServices', 'Personal Services'), ('Toys', 'Toys'), ('Transport', 'Transport')], max_length=50)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('rate', models.CharField(blank=True, max_length=100)),
                ('listing_type', models.CharField(choices=[('O', 'Offering'), ('W', 'Wants')], max_length=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='offering/%Y/%m/%d/')),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='listings', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=255)),
                ('amount', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('buyer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='txn_buyer', to=settings.AUTH_USER_MODEL)),
                ('listing', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='coinapp.listing')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='txn_seller', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserVerification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='verifications_received', to=settings.AUTH_USER_MODEL)),
                ('verifier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='verifications_made', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('verifier', 'candidate')},
            },
        ),
    ]
